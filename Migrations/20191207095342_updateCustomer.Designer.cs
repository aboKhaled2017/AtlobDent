// <auto-generated />
using System;
using Atlob_Dent.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Atlob_Dent.Migrations
{
    [DbContext(typeof(Atlob_dent_Context))]
    [Migration("20191207095342_updateCustomer")]
    partial class updateCustomer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Atlob_Dent.Data.Address", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("buildingNumber");

                    b.Property<string>("city")
                        .IsRequired();

                    b.Property<string>("country")
                        .IsRequired();

                    b.Property<string>("customerId")
                        .IsRequired();

                    b.Property<string>("fullName")
                        .IsRequired();

                    b.Property<string>("locationType")
                        .IsRequired();

                    b.Property<string>("notes");

                    b.Property<string>("phone")
                        .IsRequired();

                    b.Property<string>("streetInfo")
                        .IsRequired();

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Atlob_Dent.Data.Admin", b =>
                {
                    b.Property<string>("id");

                    b.Property<string>("fullName")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Atlob_Dent.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Atlob_Dent.Data.Category", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.Property<Guid?>("superId");

                    b.HasKey("id");

                    b.HasIndex("superId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Atlob_Dent.Data.Comment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("message")
                        .IsRequired();

                    b.Property<string>("phone")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Atlob_Dent.Data.Company", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("imgsrc");

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Atlob_Dent.Data.Customer", b =>
                {
                    b.Property<string>("id");

                    b.Property<int>("consumedProducts");

                    b.Property<string>("fullName")
                        .IsRequired();

                    b.Property<string>("imgSrc");

                    b.HasKey("id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Atlob_Dent.Data.OnSale", b =>
                {
                    b.Property<Guid>("productId");

                    b.Property<int>("disPeriod");

                    b.Property<double>("discount");

                    b.HasKey("productId");

                    b.ToTable("OnSales");
                });

            modelBuilder.Entity("Atlob_Dent.Data.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired();

                    b.Property<DateTime>("created");

                    b.Property<string>("customerId")
                        .IsRequired();

                    b.Property<Guid>("productId");

                    b.Property<int>("quantity");

                    b.Property<byte>("sizeIndex");

                    b.Property<int>("status");

                    b.HasKey("id");

                    b.HasIndex("productId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Atlob_Dent.Data.Product", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("categoryId");

                    b.Property<Guid>("companyId");

                    b.Property<long>("consumedCount");

                    b.Property<DateTime>("createdDate");

                    b.Property<string>("desc");

                    b.Property<string>("images_url")
                        .IsRequired();

                    b.Property<string>("name")
                        .IsRequired();

                    b.Property<long>("ordersCount");

                    b.Property<string>("prices")
                        .IsRequired();

                    b.Property<string>("sizes")
                        .IsRequired();

                    b.Property<string>("version")
                        .HasMaxLength(10);

                    b.Property<long>("viewed");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.HasIndex("companyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Atlob_Dent.Data.Address", b =>
                {
                    b.HasOne("Atlob_Dent.Data.Customer", "customer")
                        .WithMany("addresses")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atlob_Dent.Data.Admin", b =>
                {
                    b.HasOne("Atlob_Dent.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atlob_Dent.Data.Category", b =>
                {
                    b.HasOne("Atlob_Dent.Data.Category", "SuperCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("superId");
                });

            modelBuilder.Entity("Atlob_Dent.Data.Customer", b =>
                {
                    b.HasOne("Atlob_Dent.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atlob_Dent.Data.OnSale", b =>
                {
                    b.HasOne("Atlob_Dent.Data.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atlob_Dent.Data.Order", b =>
                {
                    b.HasOne("Atlob_Dent.Data.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atlob_Dent.Data.Product", b =>
                {
                    b.HasOne("Atlob_Dent.Data.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Atlob_Dent.Data.Company", "company")
                        .WithMany("products")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Atlob_Dent.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Atlob_Dent.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Atlob_Dent.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Atlob_Dent.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
